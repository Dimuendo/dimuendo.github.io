{"version":3,"sources":["Components/LandingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["UnitTable","lazy","TraitTable","ItemTable","CompPanel","renderLoader","CircularProgress","a11yProps","index","id","TabPanel","props","children","value","other","Typography","component","role","hidden","aria-labelledby","Box","p","theme","createMuiTheme","palette","primary","main","secondary","useStyles","makeStyles","container","minWidth","spacing","appBar","minHeight","spacer","marginRight","filterBox","display","margin","alignItems","justifyContent","marginBottom","filterSelect","backgroundColor","width","tabs","tabLabel","fontSize","NavBar","classes","React","useState","setValue","ThemeProvider","className","AppBar","position","Tabs","onChange","event","newValue","aria-label","centered","Tab","label","fallback","LandingPage","state","comps","this","compositions","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f413a2d7.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\n// import UnitTable from './UnitTable.jsx';\r\n// import TraitTable from './TraitTable.jsx';\r\n// import ItemTable from './ItemTable.jsx';\r\n// import CompPanel from './CompPanel.jsx'\r\nimport { createMuiTheme, ThemeProvider, makeStyles } from '@material-ui/core/styles';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst UnitTable = lazy(() => import('./UnitTable'))\r\nconst TraitTable = lazy(() => import('./TraitTable'))\r\nconst ItemTable = lazy(() => import('./ItemTable'))\r\nconst CompPanel = lazy(() => import('./CompPanel'))\r\n\r\nconst renderLoader = () => <CircularProgress />;\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n        <Typography\r\n            component='div'\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n          main: '#000a12',\r\n        },\r\n        secondary: {\r\n            main: '#230C63',\r\n        },\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        minWidth: theme.spacing(150),\r\n    },\r\n    appBar: {\r\n        minHeight: theme.spacing(6),\r\n    },\r\n    spacer: {\r\n        marginRight: theme.spacing(5),\r\n    },\r\n    filterBox: {\r\n        display: 'flex',\r\n        margin: 'auto',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginBottom: theme.spacing(4)\r\n        // backgroundColor: 'white'\r\n    },\r\n    filterSelect: {\r\n        backgroundColor: '#F5F5F6',\r\n        width: theme.spacing(50),\r\n    },\r\n    tabs: {\r\n        minHeight: theme.spacing(6),\r\n        display: 'flex',\r\n        margin: 'auto',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    tabLabel: {\r\n        fontSize: 18,\r\n    }\r\n}));\r\n\r\nfunction NavBar(props) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n        <Box className={classes.container}>\r\n            <AppBar className={classes.appBar} position='static'>\r\n                <Tabs \r\n                    value={value} \r\n                    onChange={handleChange} \r\n                    aria-label='tabs' \r\n                    className={classes.tabs} \r\n                    centered\r\n                >\r\n                    <Tab label={<span className={classes.tabLabel}>Team Comp Stats</span>} {...a11yProps(0)} />\r\n                    <Tab label={<span className={classes.tabLabel}>Unit Stats</span>} {...a11yProps(1)} />\r\n                    <Tab label={<span className={classes.tabLabel}>Item Stats</span>} {...a11yProps(2)} />\r\n                    <Tab label={<span className={classes.tabLabel}>Trait Stats</span>} {...a11yProps(3)} />\r\n                </Tabs>\r\n            </AppBar>\r\n            <TabPanel value={value} index={0} id='team-comps'>\r\n                <Suspense fallback={renderLoader()}>\r\n                    <CompPanel></CompPanel>\r\n                </Suspense>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1} id='unit-stats'>\r\n                <Suspense fallback={renderLoader()}>\r\n                    <UnitTable></UnitTable>\r\n                </Suspense>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2} id='item-stats'>\r\n                <Suspense fallback={renderLoader()}>\r\n                    <ItemTable></ItemTable>\r\n                </Suspense>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={3} id='trait-stats'>\r\n                <Suspense fallback={renderLoader()}>\r\n                    <TraitTable></TraitTable>\r\n                </Suspense>\r\n            </TabPanel>\r\n        </Box>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default class LandingPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <NavBar comps={this.state.compositions}></NavBar>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport LandingPage from './Components/LandingPage.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LandingPage></LandingPage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}