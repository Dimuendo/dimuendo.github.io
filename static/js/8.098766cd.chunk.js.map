{"version":3,"sources":["Components/CompositionCard.jsx","Components/CompPanel.jsx"],"names":["useStyles","makeStyles","theme","root","padding","spacing","margin","width","marginBottom","backgroundColor","avatarList","display","flex","marginLeft","champAvatar","height","expand","transform","transition","transitions","create","duration","shortest","expandOpen","expandIcon","color","statText","statBox","textAlign","CompTitle","withStyles","fontSize","alignItems","Typography","CompositionCard","props","classes","React","useState","expanded","setExpanded","champs","map","borderColour","champCost","console","log","getBorderColour","cost","borderStyle","Tooltip","title","name","key","Avatar","variant","className","style","border","src","image","winRate","top4Rate","timesPlayed","Card","Box","CardActions","disableSpacing","IconButton","clsx","onClick","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","CardContent","Grid","container","item","xs","Paper","bgcolor","spacer","marginRight","filterBox","justifyContent","filterSelect","CompPanel","compStatsDict","setCompStatsDict","useEffect","a","fetch","compStatsDictResponse","json","compStatsDictJson","fetchData","comps","Object","entries","strUnitList","compStats","units","split","i","length","champID","unitData","champNames","champCosts","champImages","push","sort","b","parseInt","compCards","compData"],"mappings":"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","file":"static/js/8.098766cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nfunction getBorderColour(champCost) {\r\n    if (champCost === 5) {\r\n        return 'gold'\r\n    } else if (champCost === 4) {\r\n        return 'purple'\r\n    } else if (champCost === 3) {\r\n        return 'blue'\r\n    } else if (champCost === 2) {\r\n        return 'green'\r\n    } else if (champCost === 1) {\r\n        return 'grey'\r\n    } else {\r\n        console.log('Invalid champion cost provided')\r\n        return 'red'\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n        margin: 'auto',\r\n        width: theme.spacing(130),\r\n        marginBottom: theme.spacing(3),\r\n        backgroundColor: '#263238',\r\n    },\r\n    avatarList: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        '& > *': {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n        marginLeft: theme.spacing(3),\r\n    },\r\n    champAvatar: {\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n          duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    expandIcon: {\r\n        color: 'white',\r\n    },\r\n    statText: {\r\n        color: 'white',\r\n    },\r\n    statBox: {\r\n        textAlign: 'center',\r\n        padding: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nconst CompTitle = withStyles({\r\n    root: {\r\n        width: '150px',\r\n        color: '#FFFFFF',\r\n        fontSize: '20px',\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        marginLeft: '5px',\r\n    }\r\n})(Typography);\r\n\r\nexport default function CompositionCard(props) {\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const champs = props.champs.map(champs => {\r\n        const champCost = champs.cost\r\n        const borderColour = getBorderColour(champCost)\r\n        const borderStyle = `2px solid ${borderColour}`\r\n        return (\r\n            <Tooltip title={champs.name} key={champs.name}>\r\n                <Avatar variant='rounded' className={classes.champAvatar} style={{border: borderStyle}} src={champs.image} />\r\n            </Tooltip>\r\n        )\r\n    });\r\n    const winRate = props.winRate;\r\n    const top4Rate = props.top4Rate;\r\n    const timesPlayed = props.timesPlayed;\r\n\r\n    return (\r\n        <Card variant='outlined' className={classes.root}>\r\n            <Box display='flex' alignItems='center'>\r\n                <CompTitle variant='h4'>\r\n                    { props.name }\r\n                </CompTitle>\r\n                <Box className={classes.avatarList}>\r\n                    { champs }\r\n                </Box>\r\n                <CardActions disableSpacing>\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded,\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                    <ExpandMoreIcon className={classes.expandIcon} />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Box>\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                <CardContent>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                            <Paper className={classes.statBox} bgcolor='white'>\r\n                                <Typography> Win Rate: { winRate } </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Paper className={classes.statBox} bgcolor='white'>\r\n                                <Typography> Top 4 Rate: { top4Rate } </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Paper className={classes.statBox} bgcolor='white'>\r\n                                <Typography> Times Played: { timesPlayed } </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport CompositionCard from './CompositionCard.jsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { champImages, champNames, champCosts } from '../Static/champions/ChampData.js'\r\nimport { useEffect } from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        // backgroundColor: '#ffebee',\r\n    },\r\n    spacer: {\r\n        marginRight: theme.spacing(5),\r\n    },\r\n    filterBox: {\r\n        display: 'flex',\r\n        margin: 'auto',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginBottom: theme.spacing(4)\r\n        // backgroundColor: 'white'\r\n    },\r\n    filterSelect: {\r\n        backgroundColor: '#F5F5F6',\r\n        width: theme.spacing(50),\r\n    },\r\n}));\r\n\r\nexport default function CompPanel(props) {\r\n    const [compStatsDict, setCompStatsDict] = React.useState([]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const compStatsDictResponse = await fetch('https://tftstats-api.herokuapp.com/compStats')\r\n            const compStatsDictJson = await compStatsDictResponse.json()\r\n            setCompStatsDict(compStatsDictJson)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    let comps = {}\r\n    for (const [strUnitList, compStats] of Object.entries(compStatsDict)) {\r\n        let units = strUnitList.split(',')\r\n        comps[strUnitList] = {}\r\n        comps[strUnitList]['units'] = []\r\n        comps[strUnitList]['compName'] = compStats['compName']\r\n        for (let i = 0; i < units.length; i++) {\r\n            let champID = units[i]\r\n            let unitData = {'name': champNames[champID], 'cost': champCosts[champID], 'image':champImages[champID]}\r\n            comps[strUnitList]['units'].push(unitData)\r\n        }\r\n        comps[strUnitList]['units'].sort(function(a, b) {\r\n            return b.cost - a.cost\r\n        })\r\n        comps[strUnitList]['winRate'] = parseInt(compStats['winPercentage'] * 100) + '%'\r\n        comps[strUnitList]['top4Rate'] = parseInt(compStats['top4Percentage'] * 100) + '%'\r\n        comps[strUnitList]['timesPlayed'] = compStats['placements'].length\r\n    }\r\n\r\n    // for (let i = 0; i < compPlayRates.length; i++) {\r\n    //     let strComp = compPlayRates[i][0]\r\n    //     let units = strComp.split(',')\r\n    //     let compName = 'Comp ' + compNum.toString()\r\n    //     comps[compName] = []\r\n    //     for (let j = 0; j < units.length; j++) {\r\n    //         let champID = units[j]\r\n    //         let unitData = {'name': champNames[champID], 'cost': champCosts[champID], 'image':champImages[champID]}\r\n    //         comps[compName].push(unitData)\r\n    //     }\r\n    //     comps[compName].sort(function(a, b) {\r\n    //         return b.cost - a.cost\r\n    //     })\r\n    //     compNum++\r\n    // }\r\n\r\n    let compCards = []\r\n    for (const [strUnitList, compData] of Object.entries(comps)) {\r\n        compCards.push(\r\n        <CompositionCard \r\n            key={strUnitList} \r\n            name={compData['compName']} \r\n            champs={compData['units']}\r\n            winRate={compData['winRate']} \r\n            top4Rate={compData['top4Rate']} \r\n            timesPlayed={compData['timesPlayed']}\r\n        >\r\n        </CompositionCard>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <button onClick={() => props.filterHandler('a', 'b')}> Unit Filter </button>\r\n            <button onClick={() => props.filterHandler('a', 'b')}> Item Filter </button>\r\n            <button onClick={() => props.filterHandler('a', 'b')}> Trait Filter </button> */}\r\n            <Box className={classes.filterBox}>\r\n                {/* <Autocomplete\r\n                    id='unit-filter'\r\n                    options={champs}\r\n                    getOptionLabel={(champs) => champs.name}\r\n                    autoHighlight\r\n                    className={classes.filterSelect}\r\n                    renderInput={(params) => <TextField {...params} label='Unit Filter' variant='filled' />}\r\n                />\r\n                <span className={classes.spacer}></span>\r\n                <Autocomplete\r\n                    id='item-filter'\r\n                    options={items}\r\n                    getOptionLabel={(items) => items.name}\r\n                    autoHighlight\r\n                    className={classes.filterSelect}\r\n                    renderInput={(params) => <TextField {...params} label='Item Filter' variant='filled' />}\r\n                />\r\n                <span className={classes.spacer}></span>\r\n                <Autocomplete\r\n                    id='traits-filter'\r\n                    options={traits}\r\n                    getOptionLabel={(traits) => traits.name}\r\n                    autoHighlight\r\n                    className={classes.filterSelect}\r\n                    renderInput={(params) => <TextField {...params} label='Trait Filter' variant='filled' />}\r\n                /> */}\r\n            </Box>\r\n            { compCards }\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}